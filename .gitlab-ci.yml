stages:
  - build
  - test

variables:
  TEST_IMAGE: ${CI_REGISTRY_IMAGE}/test:$CI_COMMIT_REF_SLUG
  TEST_LATEST: ${CI_REGISTRY_IMAGE}/test:latest
#  PROD_RAILS: ${CI_REGISTRY_IMAGE}/ekylibre-rails:$CI_COMMIT_REF_SLUG
#  PROD_RAILS_LATEST: ${CI_REGISTRY_IMAGE}/ekylibre-rails:latest
#  PROD_WEB: ${CI_REGISTRY_IMAGE}/ekylibre-web:$CI_COMMIT_REF_SLUG
#  PROD_WEB_LATEST: ${CI_REGISTRY_IMAGE}/ekylibre-web:latest


#########################################
#                 BUILD                 #
#########################################
build_test:
  image: registry.gitlab.com/ekylibre/docker-base-images/tools/deploy:1
  stage: build
  except:
    - tags
  services:
    - docker:18-dind
  before_script:
    - echo "${CI_BUILD_TOKEN}" | docker login --username $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    - /exec ruby /build.rb -v -r $CI_COMMIT_REF_SLUG -b $CI_REGISTRY_IMAGE -f docker/test/Dockerfile -i test

#build-prod:
#  stage: build
#  variables:
#    RUBY_VERSION: "2.3"
#  before_script:
#    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#    - docker pull "$PROD_RAILS" || true
#    - docker pull "$PROD_RAILS_LATEST" || true
#    - docker pull "$PROD_WEB" || true
#    - docker pull "$PROD_WEB_LATEST" || true
#  script:
#    # Build
#    - docker build --pull --build-arg RUBY_VERSION
#        --cache-from "$PROD_RAILS_LATEST" --cache-from "$PROD_RAILS"
#        -t $PROD_RAILS
#        -f docker/prod/Dockerfile.base .
#    - docker build --build-arg IMAGE_SOURCE="${PROD_RAILS}"
#        --cache-from "$PROD_RAILS_LATEST" --cache-from "$PROD_RAILS"
#        -t $PROD_RAILS_LATEST -t $PROD_RAILS
#        -f docker/prod/Dockerfile.prod docker/prod
#    - docker build --build-arg IMAGE_SOURCE="${PROD_RAILS}"
#        --cache-from "$PROD_WEB" --cache-from "$PROD_WEB_LATEST"
#        --cache-from "$PROD_RAILS_LATEST" --cache-from "$PROD_RAILS"
#        -t $PROD_WEB -t $PROD_WEB_LATEST
#        -f docker/prod/Dockerfile.web docker/prod
#    # Push
#    - docker push $PROD_RAILS
#    - docker push $PROD_RAILS_LATEST
#    - docker push $PROD_WEB
#    - docker push $PROD_WEB_LATEST


#########################################
#               TEMPLATES               #
#########################################
.test_tpl: &test_task
  image: $TEST_IMAGE
  stage: test
  variables: &test_task_variables
    # POSTGRES VARIABLES
    POSTGRES_HOST: 127.0.0.1
    REDIS_URL: redis://127.0.0.1:6379/
    POSTGRES_USER: ekylibre
    POSTGRES_DB: ekylibre_test
    TZ: Europe/Paris
    GIT_STRATEGY: none
  services:
    - mdillon/postgis:9.6-alpine
    - redis:5.0-alpine
  except:
    - tags
  tags:
    - kubernetes
  script:
    - env
    - bash /app/test/ci/run_tests ${TASK}


#########################################
#                 TESTS                 #
#########################################
test_concepts:
  <<: *test_task
  variables:
    <<: *test_task_variables
    TASK: test:concepts
test_controllers:
  <<: *test_task
  variables:
    <<: *test_task_variables
    TASK: test:controllers
test_exchangers:
  <<: *test_task
  variables:
    <<: *test_task_variables
    TASK: test:exchangers
test_helpers:
  <<: *test_task
  variables:
    <<: *test_task_variables
    TASK: test:helpers
test_jobs:
  <<: *test_task
  variables:
    <<: *test_task_variables
    TASK: test:jobs
test_lib:
  <<: *test_task
  variables:
    <<: *test_task_variables
    TASK: test:lib
test_models:
  <<: *test_task
  variables:
    <<: *test_task_variables
    TASK: test:models
test_services:
  <<: *test_task
  variables:
    <<: *test_task_variables
    TASK: test:services
test_validators:
  <<: *test_task
  variables:
    <<: *test_task_variables
    TASK: test:validators
