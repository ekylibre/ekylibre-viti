- external = params[:external].to_s
- if external == "true"
  = f.input(:external, value: true, as: :hidden)
  = f.referenced_association(:initial_owner)
- elsif external == "false"
  = f.referenced_association(:initial_owner, as: :hidden, value: Entity.of_company)
- else
  = f.referenced_association(:initial_owner)
  = f.referenced_association(:initial_container, label: Product.human_attribute_name(:container), source: {scope: {can: "store(#{f.object.variety})"}}, input_html: { data: {product_of_delivery_item: {url: backend_product_path("RECORD_ID", format: :json)}}})

- unless f.object.population_counting_unitary?
  = f.input(:initial_population, wrapper: :append, class: :inline, label: Product.human_attribute_name(:population)) do
    = f.input_field(:initial_population, as: :string)
    %span.add-on= f.object.variant.unit_name

- if f.object.indicators_list.include? :shape
  - shape_reading = f.object.readings.find { |reading| reading.indicator_name.to_s == 'shape' }
  - if shape_reading
    - errors = shape_reading.errors.messages.values.flatten
    - errors.each do |error|
      - f.object.errors.add(:initial_shape, error)
  = f.shape(:initial_shape, label: Product.human_attribute_name(:shape), input_html: { data: { "when-item": :shape, "when-set-value": "RECORD_VALUE" }}, required: f.object.nature.variable_indicators_list.include?(:shape))

- if f.object.indicators_list.include? :geolocation
  = f.geolocation(:initial_geolocation, label: Product.human_attribute_name(:geolocation))
