= f.object.errors.inspect if Rails.env.development? && f.object.errors.any?
= field_set do
  = f.input :name
  = f.input :nature, as: :radio_buttons, show: '.{{value}}-nature-options'
  = f.referenced_nomenclature :production_system
  = f.referenced_nomenclature :family, input_html: {data: {activity_family: true}}
  - family = Onoma::ActivityFamily[f.object.family]
  - hint = content_tag :span, class: 'hint-warning' do
    %i.icon.icon-warning
    = :warning_could_not_use_ift.tl
  = f.referenced_association :production_nature, new: false, label: :production_nature.tl, :input_html => { :data => {default_vine_production_id: @vine_default_production_id}}, wrapper_html: {style: "display: #{(family and family.name.in?(['plant_farming', 'vine_farming'])) ? 'block' : 'none'}"} , hint: (hint unless f.object.production_nature.present?) 
  = f.input :with_cultivation, as: :hidden
  = f.referenced_nomenclature :cultivation_variety, required: true, collection: ((family and family.cultivation_variety.present?) ? Onoma::Variety.selection(family.cultivation_variety) : []), wrapper_html: {style: "display: #{(family and family.cultivation_variety.present?) ? 'block' : 'none'}"}
  -#= f.input :with_supports, as: :hidden
  -# = f.input :support_variety, collection: ((family and family.support_variety) ? Onoma::Variety.selection(family.support_variety) : []), wrapper_html: {style: "display: #{(family and family.support_variety) ? 'block' : 'none'}"}
  = f.input :production_cycle, as: :radio_buttons, show: '.{{value}}-production-cycle-options'
  = f.production_cycle_range(required: f.object.perennial?, input_html: { class: 'day-names-hidden year-hidden', data: {"alt-format": 'd-F'}})
  .perennial-production-cycle-options
    :ruby
      if f.object.production_nature && f.object.production_nature.start_state_of_production
        collection = f.object.production_nature.start_state_of_production.map { |k,v| ["front-end.production.start_state_of_production.#{v}".t, ({}[k] = Hash[k ,v]).to_json]}
      end
    = f.input :start_state_of_production, label: :start_state_of_production.tl, required: true, collection: collection || [''], selected: f.object.start_state_of_production&.to_json
    = f.input :life_duration,required: true , wrapper: :append do
      = f.input_field :life_duration
      %span.add-on= :year.tl.pluralize
  -#.main-nature-options
    = f.input :size_indicator_name
    = f.input :size_unit_name
  = f.input :description
  = f.custom_fields

= hidden_field_tag :inspections_hidden, params[:inspections_hidden]
- unless params[:inspections_hidden]
  = field_set(:inspections, title: Activity.human_attribute_name(:inspections)) do
    = f.input :use_gradings, show: '#inspections-fields'
    #inspections-fields
      = f.input :measure_grading_items_count
      = f.input :measure_grading_net_mass, show: '#grading_net_mass'
      #grading_net_mass
        - unit_collection = Onoma::Unit.where(dimension: :mass).sort { |one, two| one.a <=> two.a }
        = f.referenced_nomenclature :grading_net_mass_unit, collection: unit_collection.selection(false), include_blanks: false
      = f.input :measure_grading_sizes, show: '#grading_sizes'
      #grading_sizes
        = f.referenced_nomenclature :grading_sizes_indicator, collection: Onoma::Indicator.where(unit: Onoma::Unit.where(dimension: :distance)).selection, include_blanks: false
        = f.referenced_nomenclature :grading_sizes_unit, collection: Onoma::Unit.where(dimension: :distance).selection, include_blanks: false

      = f.nested_association(:inspection_calibration_scales)
      = f.nested_association(:inspection_point_natures)

= hidden_field_tag :countings_hidden, params[:countings_hidden]
- unless params[:countings_hidden]
  = field_set(:countings, title: Activity.human_attribute_name(:countings)) do
    = f.input :use_countings, show: '#countings-fields'
    #countings-fields
      = f.nested_association :plant_density_abaci

.auxiliary-nature-options
  = field_set(Activity.human_attribute_name(:distributions)) do
    = f.nested_association(:distributions)

= hidden_field_tag :seasons_hidden, params[:seasons_hidden]
- unless params[:seasons_hidden]
  = field_set(:seasons, title: Activity.human_attribute_name(:seasons)) do
    = f.input :use_seasons, show: '#seasons-fields'
    #seasons-fields
      = f.nested_association(:seasons)

= hidden_field_tag :tactics_hidden, params[:tactics_hidden]
- unless params[:tactics_hidden]
  = field_set(:tactics, title: Activity.human_attribute_name(:tactics)) do
    = f.input :use_tactics, show: '#tactics-fields'
    #tactics-fields
      = f.nested_association(:tactics, maximum: 1)
