= field_set do
  = f.input :ticket_number, label: :reception_ticket.tl
  = f.input :received_at, label: :reception_date_label.tl
  = f.input :quantity, label: :received_quantity.tl, wrapper: :append do
    = f.input :quantity_value, wrapper: :simplest
    = f.input :quantity_unit, collection: %i[kilogram hectoliter].map { |u| [Nomen::Unit.find(u).human_name, u] }, include_blank: false, wrapper: :simplest

= field_set :harvested_plants do
  .nested-association
    = f.simple_fields_for(:plants, f.object.plants) do |d|
      = render '/backend/wine_incoming_harvests/plant_fields', f: d
    .links
      = link_to_add_association :add_plant.tl, f, :plants, partial: '/backend/wine_incoming_harvests/plant_fields', class: 'nested-add'

= field_set :winery_destination do
  .nested-association
    = f.simple_fields_for(:storages, f.object.storages) do |d|
      = render '/backend/wine_incoming_harvests/storage_fields', f: d
    .links
      = link_to_add_association :add_tank.tl, f, :storages, partial: '/backend/wine_incoming_harvests/storage_fields', class: 'nested-add'

= field_set :additional_informations do
  = f.input :pressing_schedule
  = f.input :pressing_started_at, as: :time
  = f.input :sedimentation_duration, wrapper: :append do
    = f.input_field :sedimentation_duration, as: :integer
    %span.add-on= Nomen::Unit.find(:minute).symbol
  = f.input :vehicle_trailer
  = f.input :harvest_transportation_duration, wrapper: :append do
    = f.input_field :harvest_transportation_duration, as: :integer
    %span.add-on= Nomen::Unit.find(:minute).symbol
  = f.input :last_load, as: :radio_buttons, collection: [[:n.tl, false], [:y.tl, true]]
  = f.input :harvest_nature, as: :select, collection: [[:mechanical.tl, 'mechanical'], [:manual_f.tl, 'manual']]
  = f.input :harvest_dock
